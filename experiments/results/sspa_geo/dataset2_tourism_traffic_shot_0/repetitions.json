[
    {
        "sql_":"SELECT province FROM cities ORDER BY X(Min(MinX(Shape))) LIMIT 1",
        "error_info":"Repeat for the 1 times for exception: no such function: MinX",
        "db_id":"tourism",
        "id":"tourism09",
        "sql":"SELECT province FROM cities ORDER BY X(Min(MinX(Shape))) LIMIT 1",
        "prompt":"You are an expert in the SpatiLite spatial database and highly skilled in writing SQL queries.\n\nIn SpatiLite,\n	The function Distance(geom1 Geometry, geom2 Geometry, 1) returns the distance between geom1 and geom2, measured in meters.\n	The function Area( s Surface , 1) returns the area of s, measured in meters.\n	The function GLength( c Curve , 1) returns the length of c, measured in meters.\n	The function Centroid( s Surface ) returns the centroid of s, which may lie outside s.\n\n	函数 Touches(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相邻（邻接）。\n	函数 Intersects(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相交。\n\n/* Given the following database schema: */\nCREATE TABLE "GDPs" (\nprovince TEXT PRIMARY KEY, \nadministrative_division_code TEXT, \nyear_2023 DOUBLE, \nyear_2022 DOUBLE, \nyear_2021 DOUBLE, \nyear_2020 DOUBLE, \nyear_2019 DOUBLE, \nyear_2018 DOUBLE, \nyear_2017 DOUBLE, \nyear_2016 DOUBLE, \nyear_2015 DOUBLE, \nyear_2014 DOUBLE, \nyear_2013 DOUBLE, \nyear_2012 DOUBLE, \nyear_2011 DOUBLE, \nyear_2010 DOUBLE, \nyear_2009 DOUBLE, \nyear_2008 DOUBLE, \nyear_2007 DOUBLE, \nyear_2006 DOUBLE, \nyear_2005 DOUBLE, \nyear_2004 DOUBLE, \nyear_2003 DOUBLE, \nyear_2002 DOUBLE, \nyear_2001 DOUBLE, \nyear_2000 DOUBLE, \nyear_1999 DOUBLE, \nyear_1998 DOUBLE, \nyear_1997 DOUBLE, \nyear_1996 DOUBLE, \nyear_1995 DOUBLE, \nyear_1994 DOUBLE, \nyear_1993 DOUBLE, \nyear_1992 DOUBLE)\n\nCREATE TABLE "airports" (\nIATA TEXT PRIMARY KEY,\nrunway_number INTEGER,\nairfield_area_class TEXT,\nName TEXT,\nLocation POINT)\n\nCREATE TABLE "cities" (\nname TEXT PRIMARY KEY, \nadministrative_division_code TEXT, \nprovince TEXT REFERENCES "GDPs" (province), \nShape MULTIPOLYGON)\n\nCREATE TABLE "scenicSpots" (\nname TEXT PRIMARY KEY,\nlevel TEXT, \naddress TEXT, \nLocation POINT)\n\nCREATE TABLE "stations" (\nname TEXT PRIMARY KEY,\naddress TEXT,\nLocation POIINT)\n\nCREATE TABLE "tours" (\ncity TEXT, \nyear INTEGER, \ninternational_tourists_number_Wan DOUBLE, \ninternational_toursim_earnings_Wan_dollar DOUBLET, \ndomestic_tourists_number_Wan DOUBLE, \nDomestic_Tourism_Earnings_Wan_Yuan DOUBLE, \nstar_hotel_number INTEGER, \nFOREIGN KEY (city) REFERENCES "cities" (name), \nPRIMARY KEY (city, year))\n\n\n/* Answer the following with no explanation: 最西边的省是哪个？最西边的省是指包含最西部城市的省份。'最西边'指的是经度最小的位置。 */\nSELECT "
    },
    {
        "sql_":"SELECT province FROM cities ORDER BY X(Min(Transform(Shape, 4326))) LIMIT 1",
        "error_info":"Repeat for the 2 times for exception: misuse of aggregate: Min()",
        "db_id":"tourism",
        "id":"tourism09",
        "sql":"SELECT province FROM cities ORDER BY X(Min(Transform(Shape, 4326))) LIMIT 1",
        "prompt":"You are an expert in the SpatiLite spatial database and highly skilled in writing SQL queries.\n\nIn SpatiLite,\n	The function Distance(geom1 Geometry, geom2 Geometry, 1) returns the distance between geom1 and geom2, measured in meters.\n	The function Area( s Surface , 1) returns the area of s, measured in meters.\n	The function GLength( c Curve , 1) returns the length of c, measured in meters.\n	The function Centroid( s Surface ) returns the centroid of s, which may lie outside s.\n\n	函数 Touches(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相邻（邻接）。\n	函数 Intersects(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相交。\n\n/* Given the following database schema: */\nCREATE TABLE "GDPs" (\nprovince TEXT PRIMARY KEY, \nadministrative_division_code TEXT, \nyear_2023 DOUBLE, \nyear_2022 DOUBLE, \nyear_2021 DOUBLE, \nyear_2020 DOUBLE, \nyear_2019 DOUBLE, \nyear_2018 DOUBLE, \nyear_2017 DOUBLE, \nyear_2016 DOUBLE, \nyear_2015 DOUBLE, \nyear_2014 DOUBLE, \nyear_2013 DOUBLE, \nyear_2012 DOUBLE, \nyear_2011 DOUBLE, \nyear_2010 DOUBLE, \nyear_2009 DOUBLE, \nyear_2008 DOUBLE, \nyear_2007 DOUBLE, \nyear_2006 DOUBLE, \nyear_2005 DOUBLE, \nyear_2004 DOUBLE, \nyear_2003 DOUBLE, \nyear_2002 DOUBLE, \nyear_2001 DOUBLE, \nyear_2000 DOUBLE, \nyear_1999 DOUBLE, \nyear_1998 DOUBLE, \nyear_1997 DOUBLE, \nyear_1996 DOUBLE, \nyear_1995 DOUBLE, \nyear_1994 DOUBLE, \nyear_1993 DOUBLE, \nyear_1992 DOUBLE)\n\nCREATE TABLE "airports" (\nIATA TEXT PRIMARY KEY,\nrunway_number INTEGER,\nairfield_area_class TEXT,\nName TEXT,\nLocation POINT)\n\nCREATE TABLE "cities" (\nname TEXT PRIMARY KEY, \nadministrative_division_code TEXT, \nprovince TEXT REFERENCES "GDPs" (province), \nShape MULTIPOLYGON)\n\nCREATE TABLE "scenicSpots" (\nname TEXT PRIMARY KEY,\nlevel TEXT, \naddress TEXT, \nLocation POINT)\n\nCREATE TABLE "stations" (\nname TEXT PRIMARY KEY,\naddress TEXT,\nLocation POIINT)\n\nCREATE TABLE "tours" (\ncity TEXT, \nyear INTEGER, \ninternational_tourists_number_Wan DOUBLE, \ninternational_toursim_earnings_Wan_dollar DOUBLET, \ndomestic_tourists_number_Wan DOUBLE, \nDomestic_Tourism_Earnings_Wan_Yuan DOUBLE, \nstar_hotel_number INTEGER, \nFOREIGN KEY (city) REFERENCES "cities" (name), \nPRIMARY KEY (city, year))\n\n\n/* Answer the following with no explanation: 最西边的省是哪个？最西边的省是指包含最西部城市的省份。'最西边'指的是经度最小的位置。 */\nSELECT "
    },
    {
        "sql_":"SELECT province FROM cities WHERE Y(Min(Transform(Shape, 4326))) = (SELECT Min(Y(Transform(Shape, 4326))) FROM cities)",
        "error_info":"Repeat for the 1 times for exception: misuse of aggregate function Min()",
        "db_id":"tourism",
        "id":"tourism10",
        "sql":"SELECT province FROM cities WHERE Y(Min(Transform(Shape, 4326))) = (SELECT Min(Y(Transform(Shape, 4326))) FROM cities)",
        "prompt":"You are an expert in the SpatiLite spatial database and highly skilled in writing SQL queries.\n\nIn SpatiLite,\n	The function Distance(geom1 Geometry, geom2 Geometry, 1) returns the distance between geom1 and geom2, measured in meters.\n	The function Area( s Surface , 1) returns the area of s, measured in meters.\n	The function GLength( c Curve , 1) returns the length of c, measured in meters.\n	The function Centroid( s Surface ) returns the centroid of s, which may lie outside s.\n\n	函数 Touches(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相邻（邻接）。\n	函数 Intersects(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相交。\n\n/* Given the following database schema: */\nCREATE TABLE "GDPs" (\nprovince TEXT PRIMARY KEY, \nadministrative_division_code TEXT, \nyear_2023 DOUBLE, \nyear_2022 DOUBLE, \nyear_2021 DOUBLE, \nyear_2020 DOUBLE, \nyear_2019 DOUBLE, \nyear_2018 DOUBLE, \nyear_2017 DOUBLE, \nyear_2016 DOUBLE, \nyear_2015 DOUBLE, \nyear_2014 DOUBLE, \nyear_2013 DOUBLE, \nyear_2012 DOUBLE, \nyear_2011 DOUBLE, \nyear_2010 DOUBLE, \nyear_2009 DOUBLE, \nyear_2008 DOUBLE, \nyear_2007 DOUBLE, \nyear_2006 DOUBLE, \nyear_2005 DOUBLE, \nyear_2004 DOUBLE, \nyear_2003 DOUBLE, \nyear_2002 DOUBLE, \nyear_2001 DOUBLE, \nyear_2000 DOUBLE, \nyear_1999 DOUBLE, \nyear_1998 DOUBLE, \nyear_1997 DOUBLE, \nyear_1996 DOUBLE, \nyear_1995 DOUBLE, \nyear_1994 DOUBLE, \nyear_1993 DOUBLE, \nyear_1992 DOUBLE)\n\nCREATE TABLE "airports" (\nIATA TEXT PRIMARY KEY,\nrunway_number INTEGER,\nairfield_area_class TEXT,\nName TEXT,\nLocation POINT)\n\nCREATE TABLE "cities" (\nname TEXT PRIMARY KEY, \nadministrative_division_code TEXT, \nprovince TEXT REFERENCES "GDPs" (province), \nShape MULTIPOLYGON)\n\nCREATE TABLE "scenicSpots" (\nname TEXT PRIMARY KEY,\nlevel TEXT, \naddress TEXT, \nLocation POINT)\n\nCREATE TABLE "stations" (\nname TEXT PRIMARY KEY,\naddress TEXT,\nLocation POIINT)\n\nCREATE TABLE "tours" (\ncity TEXT, \nyear INTEGER, \ninternational_tourists_number_Wan DOUBLE, \ninternational_toursim_earnings_Wan_dollar DOUBLET, \ndomestic_tourists_number_Wan DOUBLE, \nDomestic_Tourism_Earnings_Wan_Yuan DOUBLE, \nstar_hotel_number INTEGER, \nFOREIGN KEY (city) REFERENCES "cities" (name), \nPRIMARY KEY (city, year))\n\n\n/* Answer the following with no explanation: 中国最南边的省是哪个？最南边的省是指包含最南部城市的省份。'最南边'指的是纬度最小的位置。 */\nSELECT "
    },
    {
        "sql_":"SELECT -- First, find the province with the highest GDP in 2023 WITH HighestGDPProvince AS ( SELECT province FROM GDPs ORDER BY year_2023 DESC LIMIT 1 ) -- Then, count the number of airports in that province SELECT p.province, COUNT(a.IATA) AS airport_count FROM HighestGDPProvince p JOIN cities c ON p.province = c.province JOIN airports a ON Contains(c.Shape, a.Location) GROUP BY p.province",
        "error_info":"Repeat for the 1 times for exception: incomplete input",
        "db_id":"tourism",
        "id":"tourism14",
        "sql":"SELECT -- First, find the province with the highest GDP in 2023 WITH HighestGDPProvince AS ( SELECT province FROM GDPs ORDER BY year_2023 DESC LIMIT 1 ) -- Then, count the number of airports in that province SELECT p.province, COUNT(a.IATA) AS airport_count FROM HighestGDPProvince p JOIN cities c ON p.province = c.province JOIN airports a ON Contains(c.Shape, a.Location) GROUP BY p.province",
        "prompt":"You are an expert in the SpatiLite spatial database and highly skilled in writing SQL queries.\n\nIn SpatiLite,\n	The function Distance(geom1 Geometry, geom2 Geometry, 1) returns the distance between geom1 and geom2, measured in meters.\n	The function Area( s Surface , 1) returns the area of s, measured in meters.\n	The function GLength( c Curve , 1) returns the length of c, measured in meters.\n	The function Centroid( s Surface ) returns the centroid of s, which may lie outside s.\n\n	函数 Touches(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相邻（邻接）。\n	函数 Intersects(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相交。\n\n/* Given the following database schema: */\nCREATE TABLE "GDPs" (\nprovince TEXT PRIMARY KEY, \nadministrative_division_code TEXT, \nyear_2023 DOUBLE, \nyear_2022 DOUBLE, \nyear_2021 DOUBLE, \nyear_2020 DOUBLE, \nyear_2019 DOUBLE, \nyear_2018 DOUBLE, \nyear_2017 DOUBLE, \nyear_2016 DOUBLE, \nyear_2015 DOUBLE, \nyear_2014 DOUBLE, \nyear_2013 DOUBLE, \nyear_2012 DOUBLE, \nyear_2011 DOUBLE, \nyear_2010 DOUBLE, \nyear_2009 DOUBLE, \nyear_2008 DOUBLE, \nyear_2007 DOUBLE, \nyear_2006 DOUBLE, \nyear_2005 DOUBLE, \nyear_2004 DOUBLE, \nyear_2003 DOUBLE, \nyear_2002 DOUBLE, \nyear_2001 DOUBLE, \nyear_2000 DOUBLE, \nyear_1999 DOUBLE, \nyear_1998 DOUBLE, \nyear_1997 DOUBLE, \nyear_1996 DOUBLE, \nyear_1995 DOUBLE, \nyear_1994 DOUBLE, \nyear_1993 DOUBLE, \nyear_1992 DOUBLE)\n\nCREATE TABLE "airports" (\nIATA TEXT PRIMARY KEY,\nrunway_number INTEGER,\nairfield_area_class TEXT,\nName TEXT,\nLocation POINT)\n\nCREATE TABLE "cities" (\nname TEXT PRIMARY KEY, \nadministrative_division_code TEXT, \nprovince TEXT REFERENCES "GDPs" (province), \nShape MULTIPOLYGON)\n\nCREATE TABLE "scenicSpots" (\nname TEXT PRIMARY KEY,\nlevel TEXT, \naddress TEXT, \nLocation POINT)\n\nCREATE TABLE "stations" (\nname TEXT PRIMARY KEY,\naddress TEXT,\nLocation POIINT)\n\nCREATE TABLE "tours" (\ncity TEXT, \nyear INTEGER, \ninternational_tourists_number_Wan DOUBLE, \ninternational_toursim_earnings_Wan_dollar DOUBLET, \ndomestic_tourists_number_Wan DOUBLE, \nDomestic_Tourism_Earnings_Wan_Yuan DOUBLE, \nstar_hotel_number INTEGER, \nFOREIGN KEY (city) REFERENCES "cities" (name), \nPRIMARY KEY (city, year))\n\n\n/* Answer the following with no explanation: 2023年GDP最高的省份是哪一个？该省有多少座机场？一个省由多个城市构成。 */\nSELECT "
    },
    {
        "sql_":"SELECT -- First, find the province with the highest GDP in 2023 WITH HighestGDPProvince AS ( SELECT province FROM 'GDPs' ORDER BY year_2023 DESC LIMIT 1 ) -- Then, count the number of airports in that province SELECT p.province, COUNT(a.IATA) AS airport_count FROM HighestGDPProvince p JOIN 'cities' c ON p.province = c.province JOIN 'airports' a ON Contains(c.Shape, a.Location) GROUP BY p.province",
        "error_info":"Repeat for the 2 times for exception: incomplete input",
        "db_id":"tourism",
        "id":"tourism14",
        "sql":"SELECT -- First, find the province with the highest GDP in 2023 WITH HighestGDPProvince AS ( SELECT province FROM 'GDPs' ORDER BY year_2023 DESC LIMIT 1 ) -- Then, count the number of airports in that province SELECT p.province, COUNT(a.IATA) AS airport_count FROM HighestGDPProvince p JOIN 'cities' c ON p.province = c.province JOIN 'airports' a ON Contains(c.Shape, a.Location) GROUP BY p.province",
        "prompt":"You are an expert in the SpatiLite spatial database and highly skilled in writing SQL queries.\n\nIn SpatiLite,\n	The function Distance(geom1 Geometry, geom2 Geometry, 1) returns the distance between geom1 and geom2, measured in meters.\n	The function Area( s Surface , 1) returns the area of s, measured in meters.\n	The function GLength( c Curve , 1) returns the length of c, measured in meters.\n	The function Centroid( s Surface ) returns the centroid of s, which may lie outside s.\n\n	函数 Touches(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相邻（邻接）。\n	函数 Intersects(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相交。\n\n/* Given the following database schema: */\nCREATE TABLE "GDPs" (\nprovince TEXT PRIMARY KEY, \nadministrative_division_code TEXT, \nyear_2023 DOUBLE, \nyear_2022 DOUBLE, \nyear_2021 DOUBLE, \nyear_2020 DOUBLE, \nyear_2019 DOUBLE, \nyear_2018 DOUBLE, \nyear_2017 DOUBLE, \nyear_2016 DOUBLE, \nyear_2015 DOUBLE, \nyear_2014 DOUBLE, \nyear_2013 DOUBLE, \nyear_2012 DOUBLE, \nyear_2011 DOUBLE, \nyear_2010 DOUBLE, \nyear_2009 DOUBLE, \nyear_2008 DOUBLE, \nyear_2007 DOUBLE, \nyear_2006 DOUBLE, \nyear_2005 DOUBLE, \nyear_2004 DOUBLE, \nyear_2003 DOUBLE, \nyear_2002 DOUBLE, \nyear_2001 DOUBLE, \nyear_2000 DOUBLE, \nyear_1999 DOUBLE, \nyear_1998 DOUBLE, \nyear_1997 DOUBLE, \nyear_1996 DOUBLE, \nyear_1995 DOUBLE, \nyear_1994 DOUBLE, \nyear_1993 DOUBLE, \nyear_1992 DOUBLE)\n\nCREATE TABLE "airports" (\nIATA TEXT PRIMARY KEY,\nrunway_number INTEGER,\nairfield_area_class TEXT,\nName TEXT,\nLocation POINT)\n\nCREATE TABLE "cities" (\nname TEXT PRIMARY KEY, \nadministrative_division_code TEXT, \nprovince TEXT REFERENCES "GDPs" (province), \nShape MULTIPOLYGON)\n\nCREATE TABLE "scenicSpots" (\nname TEXT PRIMARY KEY,\nlevel TEXT, \naddress TEXT, \nLocation POINT)\n\nCREATE TABLE "stations" (\nname TEXT PRIMARY KEY,\naddress TEXT,\nLocation POIINT)\n\nCREATE TABLE "tours" (\ncity TEXT, \nyear INTEGER, \ninternational_tourists_number_Wan DOUBLE, \ninternational_toursim_earnings_Wan_dollar DOUBLET, \ndomestic_tourists_number_Wan DOUBLE, \nDomestic_Tourism_Earnings_Wan_Yuan DOUBLE, \nstar_hotel_number INTEGER, \nFOREIGN KEY (city) REFERENCES "cities" (name), \nPRIMARY KEY (city, year))\n\n\n/* Answer the following with no explanation: 2023年GDP最高的省份是哪一个？该省有多少座机场？一个省由多个城市构成。 */\nSELECT "
    },
    {
        "sql_":"SELECT -- First, find the province with the highest GDP in 2023 WITH HighestGDPProvince AS ( SELECT province FROM 'GDPs' ORDER BY year_2023 DESC LIMIT 1 ) -- Then, count the number of airports in that province SELECT p.province, COUNT(a.IATA) AS airport_count FROM HighestGDPProvince p JOIN 'cities' c ON p.province = c.province JOIN 'airports' a ON Contains(c.Shape, a.Location) GROUP BY p.province",
        "error_info":"Repeat for the 3 times for exception: incomplete input",
        "db_id":"tourism",
        "id":"tourism14",
        "sql":"SELECT -- First, find the province with the highest GDP in 2023 WITH HighestGDPProvince AS ( SELECT province FROM 'GDPs' ORDER BY year_2023 DESC LIMIT 1 ) -- Then, count the number of airports in that province SELECT p.province, COUNT(a.IATA) AS airport_count FROM HighestGDPProvince p JOIN 'cities' c ON p.province = c.province JOIN 'airports' a ON Contains(c.Shape, a.Location) GROUP BY p.province",
        "prompt":"You are an expert in the SpatiLite spatial database and highly skilled in writing SQL queries.\n\nIn SpatiLite,\n	The function Distance(geom1 Geometry, geom2 Geometry, 1) returns the distance between geom1 and geom2, measured in meters.\n	The function Area( s Surface , 1) returns the area of s, measured in meters.\n	The function GLength( c Curve , 1) returns the length of c, measured in meters.\n	The function Centroid( s Surface ) returns the centroid of s, which may lie outside s.\n\n	函数 Touches(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相邻（邻接）。\n	函数 Intersects(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相交。\n\n/* Given the following database schema: */\nCREATE TABLE "GDPs" (\nprovince TEXT PRIMARY KEY, \nadministrative_division_code TEXT, \nyear_2023 DOUBLE, \nyear_2022 DOUBLE, \nyear_2021 DOUBLE, \nyear_2020 DOUBLE, \nyear_2019 DOUBLE, \nyear_2018 DOUBLE, \nyear_2017 DOUBLE, \nyear_2016 DOUBLE, \nyear_2015 DOUBLE, \nyear_2014 DOUBLE, \nyear_2013 DOUBLE, \nyear_2012 DOUBLE, \nyear_2011 DOUBLE, \nyear_2010 DOUBLE, \nyear_2009 DOUBLE, \nyear_2008 DOUBLE, \nyear_2007 DOUBLE, \nyear_2006 DOUBLE, \nyear_2005 DOUBLE, \nyear_2004 DOUBLE, \nyear_2003 DOUBLE, \nyear_2002 DOUBLE, \nyear_2001 DOUBLE, \nyear_2000 DOUBLE, \nyear_1999 DOUBLE, \nyear_1998 DOUBLE, \nyear_1997 DOUBLE, \nyear_1996 DOUBLE, \nyear_1995 DOUBLE, \nyear_1994 DOUBLE, \nyear_1993 DOUBLE, \nyear_1992 DOUBLE)\n\nCREATE TABLE "airports" (\nIATA TEXT PRIMARY KEY,\nrunway_number INTEGER,\nairfield_area_class TEXT,\nName TEXT,\nLocation POINT)\n\nCREATE TABLE "cities" (\nname TEXT PRIMARY KEY, \nadministrative_division_code TEXT, \nprovince TEXT REFERENCES "GDPs" (province), \nShape MULTIPOLYGON)\n\nCREATE TABLE "scenicSpots" (\nname TEXT PRIMARY KEY,\nlevel TEXT, \naddress TEXT, \nLocation POINT)\n\nCREATE TABLE "stations" (\nname TEXT PRIMARY KEY,\naddress TEXT,\nLocation POIINT)\n\nCREATE TABLE "tours" (\ncity TEXT, \nyear INTEGER, \ninternational_tourists_number_Wan DOUBLE, \ninternational_toursim_earnings_Wan_dollar DOUBLET, \ndomestic_tourists_number_Wan DOUBLE, \nDomestic_Tourism_Earnings_Wan_Yuan DOUBLE, \nstar_hotel_number INTEGER, \nFOREIGN KEY (city) REFERENCES "cities" (name), \nPRIMARY KEY (city, year))\n\n\n/* Answer the following with no explanation: 2023年GDP最高的省份是哪一个？该省有多少座机场？一个省由多个城市构成。 */\nSELECT "
    },
    {
        "sql_":"SELECT -- First, find the province with the highest GDP in 2023 WITH HighestGDPProvince AS ( SELECT province FROM 'GDPs' ORDER BY year_2023 DESC LIMIT 1 ) -- Then, count the number of airports in that province SELECT p.province, COUNT(a.IATA) AS airport_count FROM HighestGDPProvince p JOIN 'cities' c ON p.province = c.province JOIN 'airports' a ON Contains(c.Shape, a.Location) GROUP BY p.province",
        "error_info":"Repeat for the 4 times for exception: incomplete input",
        "db_id":"tourism",
        "id":"tourism14",
        "sql":"SELECT -- First, find the province with the highest GDP in 2023 WITH HighestGDPProvince AS ( SELECT province FROM 'GDPs' ORDER BY year_2023 DESC LIMIT 1 ) -- Then, count the number of airports in that province SELECT p.province, COUNT(a.IATA) AS airport_count FROM HighestGDPProvince p JOIN 'cities' c ON p.province = c.province JOIN 'airports' a ON Contains(c.Shape, a.Location) GROUP BY p.province",
        "prompt":"You are an expert in the SpatiLite spatial database and highly skilled in writing SQL queries.\n\nIn SpatiLite,\n	The function Distance(geom1 Geometry, geom2 Geometry, 1) returns the distance between geom1 and geom2, measured in meters.\n	The function Area( s Surface , 1) returns the area of s, measured in meters.\n	The function GLength( c Curve , 1) returns the length of c, measured in meters.\n	The function Centroid( s Surface ) returns the centroid of s, which may lie outside s.\n\n	函数 Touches(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相邻（邻接）。\n	函数 Intersects(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相交。\n\n/* Given the following database schema: */\nCREATE TABLE "GDPs" (\nprovince TEXT PRIMARY KEY, \nadministrative_division_code TEXT, \nyear_2023 DOUBLE, \nyear_2022 DOUBLE, \nyear_2021 DOUBLE, \nyear_2020 DOUBLE, \nyear_2019 DOUBLE, \nyear_2018 DOUBLE, \nyear_2017 DOUBLE, \nyear_2016 DOUBLE, \nyear_2015 DOUBLE, \nyear_2014 DOUBLE, \nyear_2013 DOUBLE, \nyear_2012 DOUBLE, \nyear_2011 DOUBLE, \nyear_2010 DOUBLE, \nyear_2009 DOUBLE, \nyear_2008 DOUBLE, \nyear_2007 DOUBLE, \nyear_2006 DOUBLE, \nyear_2005 DOUBLE, \nyear_2004 DOUBLE, \nyear_2003 DOUBLE, \nyear_2002 DOUBLE, \nyear_2001 DOUBLE, \nyear_2000 DOUBLE, \nyear_1999 DOUBLE, \nyear_1998 DOUBLE, \nyear_1997 DOUBLE, \nyear_1996 DOUBLE, \nyear_1995 DOUBLE, \nyear_1994 DOUBLE, \nyear_1993 DOUBLE, \nyear_1992 DOUBLE)\n\nCREATE TABLE "airports" (\nIATA TEXT PRIMARY KEY,\nrunway_number INTEGER,\nairfield_area_class TEXT,\nName TEXT,\nLocation POINT)\n\nCREATE TABLE "cities" (\nname TEXT PRIMARY KEY, \nadministrative_division_code TEXT, \nprovince TEXT REFERENCES "GDPs" (province), \nShape MULTIPOLYGON)\n\nCREATE TABLE "scenicSpots" (\nname TEXT PRIMARY KEY,\nlevel TEXT, \naddress TEXT, \nLocation POINT)\n\nCREATE TABLE "stations" (\nname TEXT PRIMARY KEY,\naddress TEXT,\nLocation POIINT)\n\nCREATE TABLE "tours" (\ncity TEXT, \nyear INTEGER, \ninternational_tourists_number_Wan DOUBLE, \ninternational_toursim_earnings_Wan_dollar DOUBLET, \ndomestic_tourists_number_Wan DOUBLE, \nDomestic_Tourism_Earnings_Wan_Yuan DOUBLE, \nstar_hotel_number INTEGER, \nFOREIGN KEY (city) REFERENCES "cities" (name), \nPRIMARY KEY (city, year))\n\n\n/* Answer the following with no explanation: 2023年GDP最高的省份是哪一个？该省有多少座机场？一个省由多个城市构成。 */\nSELECT "
    },
    {
        "sql_":"SELECT -- First, find the province with the highest GDP in 2023 WITH HighestGDPProvince AS ( SELECT province FROM GDPs ORDER BY year_2023 DESC LIMIT 1 ) -- Then, count the number of airports in that province SELECT p.province, COUNT(a.IATA) AS airport_count FROM HighestGDPProvince p JOIN cities c ON p.province = c.province JOIN airports a ON Within(a.Location, c.Shape) GROUP BY p.province",
        "error_info":"Repeat for the 5 times for exception: incomplete input",
        "db_id":"tourism",
        "id":"tourism14",
        "sql":"SELECT -- First, find the province with the highest GDP in 2023 WITH HighestGDPProvince AS ( SELECT province FROM GDPs ORDER BY year_2023 DESC LIMIT 1 ) -- Then, count the number of airports in that province SELECT p.province, COUNT(a.IATA) AS airport_count FROM HighestGDPProvince p JOIN cities c ON p.province = c.province JOIN airports a ON Within(a.Location, c.Shape) GROUP BY p.province",
        "prompt":"You are an expert in the SpatiLite spatial database and highly skilled in writing SQL queries.\n\nIn SpatiLite,\n	The function Distance(geom1 Geometry, geom2 Geometry, 1) returns the distance between geom1 and geom2, measured in meters.\n	The function Area( s Surface , 1) returns the area of s, measured in meters.\n	The function GLength( c Curve , 1) returns the length of c, measured in meters.\n	The function Centroid( s Surface ) returns the centroid of s, which may lie outside s.\n\n	函数 Touches(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相邻（邻接）。\n	函数 Intersects(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相交。\n\n/* Given the following database schema: */\nCREATE TABLE "GDPs" (\nprovince TEXT PRIMARY KEY, \nadministrative_division_code TEXT, \nyear_2023 DOUBLE, \nyear_2022 DOUBLE, \nyear_2021 DOUBLE, \nyear_2020 DOUBLE, \nyear_2019 DOUBLE, \nyear_2018 DOUBLE, \nyear_2017 DOUBLE, \nyear_2016 DOUBLE, \nyear_2015 DOUBLE, \nyear_2014 DOUBLE, \nyear_2013 DOUBLE, \nyear_2012 DOUBLE, \nyear_2011 DOUBLE, \nyear_2010 DOUBLE, \nyear_2009 DOUBLE, \nyear_2008 DOUBLE, \nyear_2007 DOUBLE, \nyear_2006 DOUBLE, \nyear_2005 DOUBLE, \nyear_2004 DOUBLE, \nyear_2003 DOUBLE, \nyear_2002 DOUBLE, \nyear_2001 DOUBLE, \nyear_2000 DOUBLE, \nyear_1999 DOUBLE, \nyear_1998 DOUBLE, \nyear_1997 DOUBLE, \nyear_1996 DOUBLE, \nyear_1995 DOUBLE, \nyear_1994 DOUBLE, \nyear_1993 DOUBLE, \nyear_1992 DOUBLE)\n\nCREATE TABLE "airports" (\nIATA TEXT PRIMARY KEY,\nrunway_number INTEGER,\nairfield_area_class TEXT,\nName TEXT,\nLocation POINT)\n\nCREATE TABLE "cities" (\nname TEXT PRIMARY KEY, \nadministrative_division_code TEXT, \nprovince TEXT REFERENCES "GDPs" (province), \nShape MULTIPOLYGON)\n\nCREATE TABLE "scenicSpots" (\nname TEXT PRIMARY KEY,\nlevel TEXT, \naddress TEXT, \nLocation POINT)\n\nCREATE TABLE "stations" (\nname TEXT PRIMARY KEY,\naddress TEXT,\nLocation POIINT)\n\nCREATE TABLE "tours" (\ncity TEXT, \nyear INTEGER, \ninternational_tourists_number_Wan DOUBLE, \ninternational_toursim_earnings_Wan_dollar DOUBLET, \ndomestic_tourists_number_Wan DOUBLE, \nDomestic_Tourism_Earnings_Wan_Yuan DOUBLE, \nstar_hotel_number INTEGER, \nFOREIGN KEY (city) REFERENCES "cities" (name), \nPRIMARY KEY (city, year))\n\n\n/* Answer the following with no explanation: 2023年GDP最高的省份是哪一个？该省有多少座机场？一个省由多个城市构成。 */\nSELECT "
    },
    {
        "sql_":"SELECT city FROM tours WHERE year BETWEEN 2011 AND 2020 ORDER BY SUM(international_tourists_number_Wan) DESC LIMIT 1",
        "error_info":"Repeat for the 1 times for exception: misuse of aggregate: SUM()",
        "db_id":"tourism",
        "id":"tourism16",
        "sql":"SELECT city FROM tours WHERE year BETWEEN 2011 AND 2020 ORDER BY SUM(international_tourists_number_Wan) DESC LIMIT 1",
        "prompt":"You are an expert in the SpatiLite spatial database and highly skilled in writing SQL queries.\n\nIn SpatiLite,\n	The function Distance(geom1 Geometry, geom2 Geometry, 1) returns the distance between geom1 and geom2, measured in meters.\n	The function Area( s Surface , 1) returns the area of s, measured in meters.\n	The function GLength( c Curve , 1) returns the length of c, measured in meters.\n	The function Centroid( s Surface ) returns the centroid of s, which may lie outside s.\n\n	函数 Touches(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相邻（邻接）。\n	函数 Intersects(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相交。\n\n/* Given the following database schema: */\nCREATE TABLE "GDPs" (\nprovince TEXT PRIMARY KEY, \nadministrative_division_code TEXT, \nyear_2023 DOUBLE, \nyear_2022 DOUBLE, \nyear_2021 DOUBLE, \nyear_2020 DOUBLE, \nyear_2019 DOUBLE, \nyear_2018 DOUBLE, \nyear_2017 DOUBLE, \nyear_2016 DOUBLE, \nyear_2015 DOUBLE, \nyear_2014 DOUBLE, \nyear_2013 DOUBLE, \nyear_2012 DOUBLE, \nyear_2011 DOUBLE, \nyear_2010 DOUBLE, \nyear_2009 DOUBLE, \nyear_2008 DOUBLE, \nyear_2007 DOUBLE, \nyear_2006 DOUBLE, \nyear_2005 DOUBLE, \nyear_2004 DOUBLE, \nyear_2003 DOUBLE, \nyear_2002 DOUBLE, \nyear_2001 DOUBLE, \nyear_2000 DOUBLE, \nyear_1999 DOUBLE, \nyear_1998 DOUBLE, \nyear_1997 DOUBLE, \nyear_1996 DOUBLE, \nyear_1995 DOUBLE, \nyear_1994 DOUBLE, \nyear_1993 DOUBLE, \nyear_1992 DOUBLE)\n\nCREATE TABLE "airports" (\nIATA TEXT PRIMARY KEY,\nrunway_number INTEGER,\nairfield_area_class TEXT,\nName TEXT,\nLocation POINT)\n\nCREATE TABLE "cities" (\nname TEXT PRIMARY KEY, \nadministrative_division_code TEXT, \nprovince TEXT REFERENCES "GDPs" (province), \nShape MULTIPOLYGON)\n\nCREATE TABLE "scenicSpots" (\nname TEXT PRIMARY KEY,\nlevel TEXT, \naddress TEXT, \nLocation POINT)\n\nCREATE TABLE "stations" (\nname TEXT PRIMARY KEY,\naddress TEXT,\nLocation POIINT)\n\nCREATE TABLE "tours" (\ncity TEXT, \nyear INTEGER, \ninternational_tourists_number_Wan DOUBLE, \ninternational_toursim_earnings_Wan_dollar DOUBLET, \ndomestic_tourists_number_Wan DOUBLE, \nDomestic_Tourism_Earnings_Wan_Yuan DOUBLE, \nstar_hotel_number INTEGER, \nFOREIGN KEY (city) REFERENCES "cities" (name), \nPRIMARY KEY (city, year))\n\n\n/* Answer the following with no explanation: 2011至2020年间，入境外国游客最多的城市是哪个？ */\nSELECT "
    },
    {
        "sql_":"SELECT G.province, Area(G.Shape, 1) AS Area FROM 'GDPs' AS G JOIN 'cities' AS C ON G.province = C.province WHERE G.year_2023 > (SELECT year_2023 FROM 'GDPs' WHERE province = '浙江省') GROUP BY G.province",
        "error_info":"Repeat for the 1 times for exception: no such column: G.Shape",
        "db_id":"tourism",
        "id":"tourism32",
        "sql":"SELECT G.province, Area(G.Shape, 1) AS Area FROM 'GDPs' AS G JOIN 'cities' AS C ON G.province = C.province WHERE G.year_2023 > (SELECT year_2023 FROM 'GDPs' WHERE province = '浙江省') GROUP BY G.province",
        "prompt":"You are an expert in the SpatiLite spatial database and highly skilled in writing SQL queries.\n\nIn SpatiLite,\n	The function Distance(geom1 Geometry, geom2 Geometry, 1) returns the distance between geom1 and geom2, measured in meters.\n	The function Area( s Surface , 1) returns the area of s, measured in meters.\n	The function GLength( c Curve , 1) returns the length of c, measured in meters.\n	The function Centroid( s Surface ) returns the centroid of s, which may lie outside s.\n\n	函数 Touches(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相邻（邻接）。\n	函数 Intersects(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相交。\n\n/* Given the following database schema: */\nCREATE TABLE "GDPs" (\nprovince TEXT PRIMARY KEY, \nadministrative_division_code TEXT, \nyear_2023 DOUBLE, \nyear_2022 DOUBLE, \nyear_2021 DOUBLE, \nyear_2020 DOUBLE, \nyear_2019 DOUBLE, \nyear_2018 DOUBLE, \nyear_2017 DOUBLE, \nyear_2016 DOUBLE, \nyear_2015 DOUBLE, \nyear_2014 DOUBLE, \nyear_2013 DOUBLE, \nyear_2012 DOUBLE, \nyear_2011 DOUBLE, \nyear_2010 DOUBLE, \nyear_2009 DOUBLE, \nyear_2008 DOUBLE, \nyear_2007 DOUBLE, \nyear_2006 DOUBLE, \nyear_2005 DOUBLE, \nyear_2004 DOUBLE, \nyear_2003 DOUBLE, \nyear_2002 DOUBLE, \nyear_2001 DOUBLE, \nyear_2000 DOUBLE, \nyear_1999 DOUBLE, \nyear_1998 DOUBLE, \nyear_1997 DOUBLE, \nyear_1996 DOUBLE, \nyear_1995 DOUBLE, \nyear_1994 DOUBLE, \nyear_1993 DOUBLE, \nyear_1992 DOUBLE)\n\nCREATE TABLE "airports" (\nIATA TEXT PRIMARY KEY,\nrunway_number INTEGER,\nairfield_area_class TEXT,\nName TEXT,\nLocation POINT)\n\nCREATE TABLE "cities" (\nname TEXT PRIMARY KEY, \nadministrative_division_code TEXT, \nprovince TEXT REFERENCES "GDPs" (province), \nShape MULTIPOLYGON)\n\nCREATE TABLE "scenicSpots" (\nname TEXT PRIMARY KEY,\nlevel TEXT, \naddress TEXT, \nLocation POINT)\n\nCREATE TABLE "stations" (\nname TEXT PRIMARY KEY,\naddress TEXT,\nLocation POIINT)\n\nCREATE TABLE "tours" (\ncity TEXT, \nyear INTEGER, \ninternational_tourists_number_Wan DOUBLE, \ninternational_toursim_earnings_Wan_dollar DOUBLET, \ndomestic_tourists_number_Wan DOUBLE, \nDomestic_Tourism_Earnings_Wan_Yuan DOUBLE, \nstar_hotel_number INTEGER, \nFOREIGN KEY (city) REFERENCES "cities" (name), \nPRIMARY KEY (city, year))\n\n\n/* Answer the following with no explanation: 2023年GDP高于浙江省的省份有哪些？这些省份的面积分别是多少？浙江省由多个城市构成。浙江省以'浙江省'为名称表示。 The table "'GDPs'" does not exist in the database and should not be used. */\nSELECT "
    },
    {
        "sql_":"SELECT Name, MAX(TotalLength) AS LongestRoadLength FROM ( SELECT Name, SUM(GLength(Shape, 1)) AS TotalLength FROM roads GROUP BY Name ) AS RoadLengths This query calculates the total length of roads grouped by their names and then selects the name of the road with the maximum length.",
        "error_info":"Repeat for the 1 times for exception: near "This": syntax error",
        "db_id":"traffic",
        "id":"traffic05",
        "sql":"SELECT Name, MAX(TotalLength) AS LongestRoadLength FROM ( SELECT Name, SUM(GLength(Shape, 1)) AS TotalLength FROM roads GROUP BY Name ) AS RoadLengths This query calculates the total length of roads grouped by their names and then selects the name of the road with the maximum length.",
        "prompt":"You are an expert in the SpatiLite spatial database and highly skilled in writing SQL queries.\n\nIn SpatiLite,\n	The function Distance(geom1 Geometry, geom2 Geometry, 1) returns the distance between geom1 and geom2, measured in meters.\n	The function Area( s Surface , 1) returns the area of s, measured in meters.\n	The function GLength( c Curve , 1) returns the length of c, measured in meters.\n	The function Centroid( s Surface ) returns the centroid of s, which may lie outside s.\n\n	函数 Touches(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相邻（邻接）。\n	函数 Intersects(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相交。\n\n/* Given the following database schema: */\nCREATE TABLE "agencies" (\nNAME TEXT PRIMARY KEY,\nKIND TEXT,\nLocation POINT)\n\nCREATE TABLE "buslines" (\nlineID TEXT PRIMARY KEY,\nname TEXT UNIQUE,\ntype TEXT,\nstart_stop TEXT,\nend_stop TEXT,\nstart_time TEXT,\nend_time TEXT, \nShape LINESTRING,\nforeign key (start_stop) references busstops (name),\nforeign key (end_stop) references busstops (name))\n\nCREATE TABLE "busstops" (\nstopID TEXT PRIMARY KEY,\nname TEXT Unique,\nX DOUBLE,\nY DOUBLE,\nlineIDs TEXT, \nLocation POINT)\n\nCREATE TABLE "districts" (\nname TEXT PRIMARY KEY,\nadministrative_division_code TEXT Unique,\nENG_NAME TEXT, \nShape POLYGON)\n\nCREATE TABLE "greenspaces" (\nPK_UID INTEGER PRIMARY KEY AUTOINCREMENT,\nNAME TEXT,\nKIND TEXT,\nShape_Leng DOUBLE,\nShape POLYGON)\n\nCREATE TABLE "hotels" (\nNAME TEXT PRIMARY KEY,\nKIND TEXT, \nLocation POINT)\n\nCREATE TABLE "rails" (\ngml_id TEXT PRIMARY KEY,\nName TEXT,\nfclass TEXT,\nShape MULTILINESTRING)\n\nCREATE TABLE "rivers" (\ngml_id TEXT PRIMARY KEY,\nName TEXT,\nfclass TEXT,\nShape MULTIPOLYGON)\n\nCREATE TABLE "roads" (\ngml_id TEXT PRIMARY KEY,\nName TEXT,\npyname TEXT,\nkind_num INTEGER,\nkind TEXT,\nwidth INTEGER,\nspeedclass INTEGER, \nShape LINESTRING)\n\nCREATE TABLE "subways" (\nLine TEXT PRIMARY KEY,\nShape LINESTRING)\n\nCREATE TABLE "subwaystations" (\nstation TEXT,\nLine TEXT,\naddress TEXT,\nLocation POINT,\nprimary key(station, Line),\nforeign key(Line) references subways(Line))\n\n\n/* Answer the following with no explanation: 南京市最长的道路是哪一条？它的具体长度是多少？一条道路由所有名字相同的路段构成。 */\nSELECT "
    },
    {
        "sql_":"SELECT G.NAME, MIN(Distance(S.Shape, L.Shape, 1)) AS Distance FROM greenspaces G, subways L WHERE L.Line = 'line1' AND G.NAME LIKE '%公园%' GROUP BY G.NAME ORDER BY Distance LIMIT 1",
        "error_info":"Repeat for the 1 times for exception: no such column: S.Shape",
        "db_id":"traffic",
        "id":"traffic61",
        "sql":"SELECT G.NAME, MIN(Distance(S.Shape, L.Shape, 1)) AS Distance FROM greenspaces G, subways L WHERE L.Line = 'line1' AND G.NAME LIKE '%公园%' GROUP BY G.NAME ORDER BY Distance LIMIT 1",
        "prompt":"You are an expert in the SpatiLite spatial database and highly skilled in writing SQL queries.\n\nIn SpatiLite,\n	The function Distance(geom1 Geometry, geom2 Geometry, 1) returns the distance between geom1 and geom2, measured in meters.\n	The function Area( s Surface , 1) returns the area of s, measured in meters.\n	The function GLength( c Curve , 1) returns the length of c, measured in meters.\n	The function Centroid( s Surface ) returns the centroid of s, which may lie outside s.\n\n	函数 Touches(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相邻（邻接）。\n	函数 Intersects(geom1 Geometry, geom2 Geometry) 判断 geom1 和 geom2 是否相交。\n\n/* Given the following database schema: */\nCREATE TABLE "agencies" (\nNAME TEXT PRIMARY KEY,\nKIND TEXT,\nLocation POINT)\n\nCREATE TABLE "buslines" (\nlineID TEXT PRIMARY KEY,\nname TEXT UNIQUE,\ntype TEXT,\nstart_stop TEXT,\nend_stop TEXT,\nstart_time TEXT,\nend_time TEXT, \nShape LINESTRING,\nforeign key (start_stop) references busstops (name),\nforeign key (end_stop) references busstops (name))\n\nCREATE TABLE "busstops" (\nstopID TEXT PRIMARY KEY,\nname TEXT Unique,\nX DOUBLE,\nY DOUBLE,\nlineIDs TEXT, \nLocation POINT)\n\nCREATE TABLE "districts" (\nname TEXT PRIMARY KEY,\nadministrative_division_code TEXT Unique,\nENG_NAME TEXT, \nShape POLYGON)\n\nCREATE TABLE "greenspaces" (\nPK_UID INTEGER PRIMARY KEY AUTOINCREMENT,\nNAME TEXT,\nKIND TEXT,\nShape_Leng DOUBLE,\nShape POLYGON)\n\nCREATE TABLE "hotels" (\nNAME TEXT PRIMARY KEY,\nKIND TEXT, \nLocation POINT)\n\nCREATE TABLE "rails" (\ngml_id TEXT PRIMARY KEY,\nName TEXT,\nfclass TEXT,\nShape MULTILINESTRING)\n\nCREATE TABLE "rivers" (\ngml_id TEXT PRIMARY KEY,\nName TEXT,\nfclass TEXT,\nShape MULTIPOLYGON)\n\nCREATE TABLE "roads" (\ngml_id TEXT PRIMARY KEY,\nName TEXT,\npyname TEXT,\nkind_num INTEGER,\nkind TEXT,\nwidth INTEGER,\nspeedclass INTEGER, \nShape LINESTRING)\n\nCREATE TABLE "subways" (\nLine TEXT PRIMARY KEY,\nShape LINESTRING)\n\nCREATE TABLE "subwaystations" (\nstation TEXT,\nLine TEXT,\naddress TEXT,\nLocation POINT,\nprimary key(station, Line),\nforeign key(Line) references subways(Line))\n\n\n/* Answer the following with no explanation: 地铁1号线最近的公园是哪一个，距离多远？公园指的是名称中含有'公园'字样的地点，并且公园由名字相同的多个区域组成。地铁1号线以'line1'为名称表示。 The table "S" does not exist in the database and should not be used. */\nSELECT "
    }
]