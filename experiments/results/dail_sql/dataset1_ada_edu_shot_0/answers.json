[
    {
        "db_id":"ada",
        "id":"ada01",
        "sql":"SELECT SUM(Area) FROM lakes WHERE name = '太湖'"
    },
    {
        "db_id":"ada",
        "id":"ada02",
        "sql":"SELECT name FROM cities ORDER BY Y(location) ASC LIMIT 1"
    },
    {
        "db_id":"ada",
        "id":"ada03",
        "sql":"SELECT DISTINCT p.name FROM provinces p JOIN lakes l ON Intersects(p.shape, l.shape) WHERE l.name = '洞庭湖'"
    },
    {
        "db_id":"ada",
        "id":"ada04",
        "sql":"SELECT DISTINCT provinces.name FROM provinces JOIN rivers ON Intersects(provinces.shape, rivers.shape) WHERE rivers.name = '长江'"
    },
    {
        "db_id":"ada",
        "id":"ada05",
        "sql":"SELECT SUM(GLength(Intersection(rivers.shape, provinces.shape))) AS ChangjiangLengthInHubei FROM rivers, provinces WHERE rivers.name = '长江' AND provinces.name = '湖北省'"
    },
    {
        "db_id":"ada",
        "id":"ada06",
        "sql":"SELECT DISTINCT rivers.name FROM rivers JOIN provinces ON Intersects(rivers.shape, provinces.shape) WHERE provinces.name = '湖北省' AND rivers.level_river = 1"
    },
    {
        "db_id":"ada",
        "id":"ada07",
        "sql":"SELECT p.name AS province_name, SUM(GLength(Intersection(r.shape, p.shape))) AS total_river_length FROM rivers r JOIN provinces p ON Intersects(r.shape, p.shape) GROUP BY p.name"
    },
    {
        "db_id":"ada",
        "id":"ada08",
        "sql":"SELECT -- Assuming the area of each province is stored in the 'shape' column of the 'provinces' table -- and that the area can be calculated using the Area function from the spatial data. SELECT name, Area(shape) AS area FROM provinces ORDER BY area DESC LIMIT 1"
    },
    {
        "db_id":"ada",
        "id":"ada09",
        "sql":"SELECT provinces.name, COUNT(cities.name) AS city_count FROM provinces JOIN cities ON provinces.name = cities.province GROUP BY provinces.name"
    },
    {
        "db_id":"ada",
        "id":"ada10",
        "sql":"SELECT p.name, Area(p.shape) AS area FROM provinces p JOIN provinces gd ON gd.name = '广东省' WHERE Touches(p.shape, gd.shape)"
    },
    {
        "db_id":"ada",
        "id":"ada11",
        "sql":"SELECT SUM(Shape_Length) AS Total_Rail_Length FROM rails"
    },
    {
        "db_id":"ada",
        "id":"ada12",
        "sql":"SELECT SUM(Shape_Length) FROM rails WHERE name = '京广线'"
    },
    {
        "db_id":"ada",
        "id":"ada13",
        "sql":"SELECT DISTINCT c.name FROM cities c JOIN provinces p ON c.province = p.name JOIN rails r ON Intersects(r.shape, c.shape) WHERE r.name = '京广线' AND p.name = '河南省'"
    },
    {
        "db_id":"ada",
        "id":"ada14",
        "sql":"SELECT DISTINCT c.name FROM cities c JOIN rails r ON Intersects(c.shape, r.shape)"
    },
    {
        "db_id":"ada",
        "id":"ada15",
        "sql":"SELECT c.name FROM cities c LEFT JOIN rails r ON Intersects(c.shape, r.shape) WHERE r.objectID IS NULL"
    },
    {
        "db_id":"ada",
        "id":"ada16",
        "sql":"SELECT name, Area(shape) AS area FROM provinces ORDER BY POPU DESC LIMIT 1"
    },
    {
        "db_id":"ada",
        "id":"ada17",
        "sql":"SELECT SUM(Area) AS Total_Area_Level_1_Lakes FROM lakes WHERE level_lake = 1"
    },
    {
        "db_id":"ada",
        "id":"ada18",
        "sql":"SELECT name FROM provinces ORDER BY (GDP_2000 - GDP_1994) DESC LIMIT 1"
    },
    {
        "db_id":"ada",
        "id":"ada19",
        "sql":"SELECT name, shape.STArea() AS area FROM provinces ORDER BY Pop_Minori DESC LIMIT 1"
    },
    {
        "db_id":"ada",
        "id":"ada20",
        "sql":"SELECT DISTINCT rivers.name FROM rivers JOIN rails ON Intersects(rivers.shape, rails.shape) WHERE rivers.level_river = 1"
    },
    {
        "db_id":"ada",
        "id":"ada21",
        "sql":"SELECT a.name FROM airports a, provinces p WHERE DWithin(a.location, Centroid(p.shape), 100000) -- Assuming a reasonable distance threshold in the same units as the location AND p.name = '湖北省' ORDER BY Distance(a.location, Centroid(p.shape)) LIMIT 1"
    },
    {
        "db_id":"ada",
        "id":"ada22",
        "sql":"SELECT DISTINCT r2.name FROM rails r1 JOIN rails r2 ON Intersects(r1.shape, r2.shape) WHERE r1.name = '盘西' AND r2.name != '盘西'"
    },
    {
        "db_id":"ada",
        "id":"ada23",
        "sql":"SELECT DISTINCT rivers.name FROM rivers JOIN provinces ON Intersects(rivers.shape, provinces.shape) WHERE provinces.name = '新疆维吾尔自治区'"
    },
    {
        "db_id":"ada",
        "id":"ada24",
        "sql":"SELECT SUM(GLength(Intersection(rivers.shape, provinces.shape))) AS total_river_length FROM rivers JOIN provinces ON Intersects(rivers.shape, provinces.shape) WHERE provinces.name = '新疆维吾尔自治区'"
    },
    {
        "db_id":"ada",
        "id":"ada25",
        "sql":"SELECT SUM(Area(shape)) AS Total_Area, SUM(POPU) AS Total_Population FROM provinces WHERE name IN ('西藏自治区', '内蒙古自治区', '新疆维吾尔自治区', '广西壮族自治区', '宁夏回族自治区')"
    },
    {
        "db_id":"ada",
        "id":"ada26",
        "sql":"SELECT name, POPU FROM provinces WHERE name IN ('西藏自治区', '内蒙古自治区', '新疆维吾尔自治区', '广西壮族自治区', '宁夏回族自治区') ORDER BY Area(shape) ASC LIMIT 1"
    },
    {
        "db_id":"ada",
        "id":"ada27",
        "sql":"SELECT DISTINCT p.name FROM provinces p JOIN rivers r1 ON Intersects(p.shape, r1.shape) JOIN rivers r2 ON Intersects(p.shape, r2.shape) WHERE r1.name = '长江' AND r2.name = '黄河'"
    },
    {
        "db_id":"ada",
        "id":"ada28",
        "sql":"SELECT SUM(p.Pop_65Plus) AS Total_Population_Over_65 FROM provinces p JOIN rivers r ON Intersects(p.shape, r.shape) WHERE r.name = '长江'"
    },
    {
        "db_id":"ada",
        "id":"ada29",
        "sql":"SELECT DISTINCT r.name FROM rivers rv, rails r WHERE Intersects(rv.shape, r.shape) AND rv.name = '长江'"
    },
    {
        "db_id":"ada",
        "id":"ada30",
        "sql":"SELECT SUM(Area(provinces.shape)) AS total_area FROM provinces JOIN rivers ON Intersects(provinces.shape, rivers.shape) WHERE rivers.name = '长江'"
    },
    {
        "db_id":"ada",
        "id":"ada31",
        "sql":"SELECT p.name, p.POPU FROM provinces p JOIN cities c ON c.province = p.name JOIN rails r ON Intersects(c.shape, r.shape) WHERE r.name = '京广线'"
    },
    {
        "db_id":"ada",
        "id":"ada32",
        "sql":"SELECT name FROM cities ORDER BY XMin(shape) LIMIT 1"
    },
    {
        "db_id":"ada",
        "id":"ada33",
        "sql":"SELECT The question '中国最东部的省份是哪一个？' translates to 'Which is the easternmost province in China?' To answer this question using the provided database schema, you would typically use the `provinces` table, which contains geographic data in the `shape` column. However, SQL alone cannot directly determine the easternmost point without specific geographic functions that can interpret the MULTIPOLYGON data type. Assuming you have access to a spatial database like PostGIS, you could use a function like `XMax` to find the maximum longitude (easternmost point) of the provinces. Here is an example SQL query that could be used if the database supports these functions: SELECT name FROM provinces ORDER BY XMax(shape) DESC LIMIT 1 This query orders the provinces by the maximum X coordinate (longitude) of their shapes and selects the name of the province with the highest value, which would be the easternmost province. However, without knowing the specific SQL functions your database supports for handling geographic data, this is a conceptual answer."
    },
    {
        "db_id":"ada",
        "id":"ada34",
        "sql":"SELECT p.name AS province_name, SUM(r.length) AS total_length FROM provinces p JOIN rivers r ON Intersects(p.shape, r.shape) WHERE r.level_river = 1 GROUP BY p.name"
    },
    {
        "db_id":"ada",
        "id":"ada35",
        "sql":"SELECT p.name AS province_name, COUNT(a.name) AS airport_count FROM provinces p LEFT JOIN cities c ON p.name = c.province LEFT JOIN airports a ON Contains(p.shape, a.location) GROUP BY p.name"
    },
    {
        "db_id":"ada",
        "id":"ada36",
        "sql":"SELECT c.name FROM cities c, airports a WHERE a.name = '安庆' AND DWithin(a.location, c.shape, 200000)"
    },
    {
        "db_id":"ada",
        "id":"ada37",
        "sql":"SELECT COUNT(*) FROM airports JOIN cities ON Contains(cities.shape, airports.location) WHERE cities.name IN ('河北省', '天津市', '北京市')"
    },
    {
        "db_id":"ada",
        "id":"ada38",
        "sql":"SELECT airports.name, Distance(cities.shape::geography, airports.location::geography) AS distance FROM airports, cities WHERE cities.name = '苏州市' ORDER BY distance ASC LIMIT 1"
    },
    {
        "db_id":"ada",
        "id":"ada39",
        "sql":"SELECT -- First, find the province with the highest population WITH ProvincePopulation AS ( SELECT name, POPU FROM provinces ORDER BY POPU DESC LIMIT 1 ) -- Then, count the number of airports in that province SELECT p.name AS ProvinceName, COUNT(a.name) AS NumberOfAirports FROM ProvincePopulation p JOIN cities c ON c.province = p.name JOIN airports a ON Contains(c.shape, a.location) GROUP BY p.name"
    },
    {
        "db_id":"ada",
        "id":"ada40",
        "sql":"SELECT a.name, a.location FROM airports a, rails r WHERE r.name = '京广线' AND DWithin(r.shape, a.location, 10000)"
    },
    {
        "db_id":"ada",
        "id":"ada41",
        "sql":"SELECT airports.name FROM airports, lakes, provinces WHERE lakes.name = '太湖' AND provinces.name = '江苏省' AND DWithin( airports.location, lakes.shape, Distance( provinces.shape, lakes.shape ) ) ORDER BY Distance(airports.location, lakes.shape) LIMIT 1"
    },
    {
        "db_id":"ada",
        "id":"ada42",
        "sql":"SELECT provinces.name, Area(provinces.shape) AS area FROM provinces ORDER BY Pop_Female DESC LIMIT 1"
    },
    {
        "db_id":"ada",
        "id":"ada43",
        "sql":"SELECT location, COUNT(*) AS airport_count FROM airports GROUP BY location ORDER BY airport_count DESC LIMIT 1"
    },
    {
        "db_id":"ada",
        "id":"ada44",
        "sql":"SELECT name, MAX(total_length) AS longest_length FROM ( SELECT name, SUM(Shape_Length) AS total_length FROM rails GROUP BY name ) AS rail_lengths"
    },
    {
        "db_id":"ada",
        "id":"ada45",
        "sql":"SELECT "
    },
    {
        "db_id":"ada",
        "id":"ada46",
        "sql":"SELECT a.name, a.location FROM airports a, lakes l WHERE l.name = '太湖' AND DistanceSphere(a.location, l.shape) <= 200000"
    },
    {
        "db_id":"ada",
        "id":"ada47",
        "sql":"SELECT name FROM cities WHERE province = '吉林省' ORDER BY Y(location) DESC LIMIT 1"
    },
    {
        "db_id":"ada",
        "id":"ada48",
        "sql":"SELECT DISTINCT c.name FROM cities c JOIN rails r ON Intersects(c.shape, r.shape) WHERE r.name = '湘桂线'"
    },
    {
        "db_id":"ada",
        "id":"ada49",
        "sql":"SELECT GLength(Intersection( (SELECT shape FROM provinces WHERE name = '河南省'), (SELECT shape FROM provinces WHERE name = '湖北省') )) AS border_length"
    },
    {
        "db_id":"ada",
        "id":"ada50",
        "sql":"SELECT name FROM cities WHERE Contains( (SELECT shape FROM provinces WHERE name = '湖北省'), location ) ORDER BY Distance( location, Centroid((SELECT shape FROM provinces WHERE name = '湖北省')) ) ASC LIMIT 1"
    },
    {
        "db_id":"ada",
        "id":"ada51",
        "sql":"SELECT p2.name, GLength(Intersection(p1.shape, p2.shape)) AS border_length FROM provinces p1, provinces p2 WHERE p1.name = '河南省' AND p2.name != '河南省' AND Touches(p1.shape, p2.shape) ORDER BY border_length DESC LIMIT 1"
    },
    {
        "db_id":"ada",
        "id":"ada52",
        "sql":"SELECT airports.name, Distance( airports.location, Boundary( Intersection( (SELECT shape FROM provinces WHERE name = '河南省'), (SELECT shape FROM provinces WHERE name = '湖北省') ) ) ) AS distance_to_border FROM airports ORDER BY distance_to_border ASC LIMIT 1"
    },
    {
        "db_id":"ada",
        "id":"ada53",
        "sql":"SELECT p.name FROM provinces p WHERE NOT Contains(p.shape, Centroid(p.shape))"
    },
    {
        "db_id":"ada",
        "id":"ada54",
        "sql":"SELECT name, SUM(length) AS total_length FROM rivers WHERE name IN ('长江', '黄河') GROUP BY name"
    },
    {
        "db_id":"ada",
        "id":"ada55",
        "sql":"SELECT provinces.name, COUNT(cities.name) AS city_count FROM provinces JOIN cities ON provinces.name = cities.province GROUP BY provinces.name ORDER BY city_count DESC LIMIT 1"
    },
    {
        "db_id":"ada",
        "id":"ada56",
        "sql":"SELECT DISTINCT p.name FROM provinces p JOIN rivers r ON Intersects(p.shape, r.shape) JOIN rails ra ON Intersects(p.shape, ra.shape) WHERE r.name = '黄河' AND ra.name = '京广线'"
    },
    {
        "db_id":"edu",
        "id":"edu01",
        "sql":"SELECT COUNT(*) FROM universities WHERE city = '北京市'"
    },
    {
        "db_id":"edu",
        "id":"edu02",
        "sql":"SELECT provinces.name, COUNT(universities.name) AS university_count FROM provinces LEFT JOIN universities ON provinces.name = universities.province GROUP BY provinces.name"
    },
    {
        "db_id":"edu",
        "id":"edu03",
        "sql":"SELECT cities.name, cities.Shape_Area FROM cities JOIN provinces ON cities.province = provinces.name WHERE provinces.name = '河北省'"
    },
    {
        "db_id":"edu",
        "id":"edu04",
        "sql":"SELECT The provided SQL schema does not contain direct information about neighboring provinces or cities. To determine neighboring provinces of a specific city (like Beijing), you would typically need either adjacency data explicitly stored in the database or the ability to perform spatial queries on the geometry data (MULTIPOLYGON) to find adjacent regions. However, since the schema does not provide a direct way to query neighboring provinces and does not include a table or data indicating adjacency or borders between provinces, and given that SQL itself does not inherently support complex spatial queries without extensions (like PostGIS for PostgreSQL), the question cannot be answered directly with the given schema. To theoretically answer the question about neighboring provinces of Beijing (北京市) using a spatial database extension or additional adjacency data, you would perform a spatial join or look up adjacency in an additional table that must be created and populated with appropriate data. Here's a conceptual SQL query using spatial functions, assuming such capabilities and data exist: SELECT DISTINCT p2.name FROM provinces p1 JOIN provinces p2 ON Touches(p1.shape, p2.shape) WHERE p1.name = '北京市' This query assumes the existence of a spatial function `Touches` that determines if the boundaries of two geometries touch each other. Note that this is purely illustrative and depends on having a spatially enabled SQL database."
    },
    {
        "db_id":"edu",
        "id":"edu05",
        "sql":"SELECT WITH AdjacentProvinces AS ( SELECT p.name AS province_name FROM provinces p, cities c WHERE Touches(p.shape, c.shape) AND c.name = '北京市' ) SELECT ap.province_name, COUNT(u.name) AS university_count FROM AdjacentProvinces ap LEFT JOIN universities u ON u.province = ap.province_name GROUP BY ap.province_name"
    },
    {
        "db_id":"edu",
        "id":"edu06",
        "sql":"SELECT Shape_Area FROM provinces WHERE name = '湖北省'"
    },
    {
        "db_id":"edu",
        "id":"edu07",
        "sql":"SELECT SUM(POP2020) AS Population_2020 FROM cities WHERE province = '湖北省'"
    },
    {
        "db_id":"edu",
        "id":"edu08",
        "sql":"SELECT universities.name FROM universities JOIN cities ON universities.city = cities.name WHERE universities.project_211 = 1 ORDER BY X(location) ASC LIMIT 1"
    },
    {
        "db_id":"edu",
        "id":"edu09",
        "sql":"SELECT SUM(POP2020) - SUM(POP2000) AS population_increase FROM cities WHERE province = '湖北省'"
    },
    {
        "db_id":"edu",
        "id":"edu10",
        "sql":"SELECT u.name FROM universities u JOIN provinces p ON u.province = p.name WHERE (u.project_985 = 1 OR u.project_211 = 1) AND p.name = '湖北省'"
    },
    {
        "db_id":"edu",
        "id":"edu11",
        "sql":"SELECT name FROM cities WHERE province = '湖北省' ORDER BY Shape_Area DESC LIMIT 1"
    },
    {
        "db_id":"edu",
        "id":"edu12",
        "sql":"SELECT cities.name, cities.Shape_Area FROM cities JOIN provinces ON cities.province = provinces.name WHERE provinces.name = '内蒙古自治区'"
    },
    {
        "db_id":"edu",
        "id":"edu13",
        "sql":"SELECT provinces.name AS Province, COUNT(universities.name) AS Key_Universities_Count FROM provinces JOIN universities ON provinces.name = universities.province WHERE universities.project_985 = 1 OR universities.project_211 = 1 GROUP BY provinces.name"
    },
    {
        "db_id":"edu",
        "id":"edu14",
        "sql":"SELECT SUM(Shape_Area) AS Total_Area FROM provinces WHERE name IN ('北京市', '天津市', '河北省')"
    },
    {
        "db_id":"edu",
        "id":"edu15",
        "sql":"SELECT The SQL query to find the westernmost province in China, based on the minimum longitude (assuming the longitude is stored in the `shape` column as part of the MULTIPOLYGON data), would look something like this: SELECT name FROM provinces ORDER BY XMin(shape) LIMIT 1 This query assumes that the `XMin` function is available to extract the minimum X-coordinate (longitude) from the MULTIPOLYGON data type, which is typical in spatial databases like PostGIS. The query orders the provinces by their minimum longitude and selects the first one, which would be the westernmost province."
    },
    {
        "db_id":"edu",
        "id":"edu16",
        "sql":"SELECT Distance( (SELECT Centroid(shape) FROM cities WHERE name = '郑州市'), (SELECT Centroid(shape) FROM provinces WHERE name = '河南省') ) AS distance_in_meters"
    },
    {
        "db_id":"edu",
        "id":"edu17",
        "sql":"SELECT c.name FROM cities c JOIN provinces p ON c.province = p.name WHERE Touches(c.shape, (SELECT shape FROM cities WHERE name = '安阳市')) AND p.name != '河南省'"
    },
    {
        "db_id":"edu",
        "id":"edu18",
        "sql":"SELECT name, Shape_Area FROM cities WHERE administrative_division_category != '直辖市' ORDER BY POP2020 DESC LIMIT 1"
    },
    {
        "db_id":"edu",
        "id":"edu19",
        "sql":"SELECT U.name FROM universities U, universities BeijingU WHERE BeijingU.name = '北京大学' AND U.project_985 = 1 AND U.name <> '北京大学' AND Distance(BeijingU.location, U.location) <= 3000"
    },
    {
        "db_id":"edu",
        "id":"edu20",
        "sql":"SELECT SUM(POP2020) AS Total_Population_2020 FROM cities WHERE province IN ('北京市', '天津市', '河北省')"
    },
    {
        "db_id":"edu",
        "id":"edu21",
        "sql":"SELECT name, POP2020 FROM cities WHERE province = '内蒙古自治区'"
    },
    {
        "db_id":"edu",
        "id":"edu22",
        "sql":"SELECT p.name FROM provinces p LEFT JOIN universities u ON p.name = u.province WHERE u.project_985 = 1 GROUP BY p.name HAVING COUNT(u.name) = 0"
    },
    {
        "db_id":"edu",
        "id":"edu23",
        "sql":"SELECT DISTINCT cities.name FROM cities JOIN universities ON cities.name = universities.city WHERE universities.project_985 = 1 OR universities.project_211 = 1"
    },
    {
        "db_id":"edu",
        "id":"edu24",
        "sql":"SELECT DISTINCT c.name FROM cities c JOIN universities u ON c.name = u.city WHERE u.project_985 = 1 AND u.project_211 = 1"
    },
    {
        "db_id":"edu",
        "id":"edu25",
        "sql":"SELECT c.name FROM cities c LEFT JOIN universities u ON c.name = u.city AND u.project_985 = 1 WHERE c.administrative_division_category = '地级市' AND u.name IS NULL"
    },
    {
        "db_id":"edu",
        "id":"edu26",
        "sql":"SELECT p.name FROM provinces p WHERE NOT EXISTS ( SELECT 1 FROM provinces p2 WHERE p.name != p2.name AND Touches(p.shape, p2.shape) )"
    },
    {
        "db_id":"edu",
        "id":"edu27",
        "sql":"SELECT p1.name AS province, COUNT(DISTINCT p2.name) AS bordering_provinces FROM provinces p1, provinces p2 WHERE Touches(p1.shape, p2.shape) AND p1.name != p2.name GROUP BY p1.name"
    },
    {
        "db_id":"edu",
        "id":"edu28",
        "sql":"SELECT U.name, Distance(U.location, ( SELECT location FROM universities WHERE name = '北京大学' )) AS distance FROM universities U WHERE U.city = '北京市' AND U.project_985 = 1 AND U.name != '北京大学' ORDER BY distance ASC LIMIT 1"
    },
    {
        "db_id":"edu",
        "id":"edu29",
        "sql":"SELECT U.name, Distance(U.location, (SELECT location FROM universities WHERE name = '北京大学')) AS distance FROM universities U WHERE (U.project_985 = 1 OR U.project_211 = 1) AND U.name <> '北京大学' AND U.city = '北京市' ORDER BY distance ASC LIMIT 5"
    },
    {
        "db_id":"edu",
        "id":"edu30",
        "sql":"SELECT COUNT(*) FROM universities WHERE province = '湖北省' AND affiliation = '教育部'"
    },
    {
        "db_id":"edu",
        "id":"edu31",
        "sql":"SELECT c.name FROM cities c JOIN provinces p ON c.province = p.name WHERE p.name = '河南省' AND NOT EXISTS ( SELECT 1 FROM cities c2 JOIN provinces p2 ON c2.province = p2.name WHERE Touches(c.shape, c2.shape) AND p2.name <> '河南省' )"
    },
    {
        "db_id":"edu",
        "id":"edu32",
        "sql":"SELECT DISTINCT c1.name FROM cities c1 JOIN provinces p1 ON c1.province = p1.name JOIN cities c2 ON Touches(c1.shape, c2.shape) JOIN provinces p2 ON c2.province = p2.name WHERE p1.name = '河南省' AND p2.name != '河南省'"
    },
    {
        "db_id":"edu",
        "id":"edu33",
        "sql":"SELECT c1.name FROM cities c1, cities c2 WHERE Touches(c1.shape, c2.shape) AND c2.name = '郑州市' ORDER BY c1.POP2020 DESC LIMIT 1"
    },
    {
        "db_id":"edu",
        "id":"edu34",
        "sql":"SELECT The SQL query provided in the question does not specify the SRID (Spatial Reference System Identifier) for the `location` column in the `universities` table. Therefore, it is not possible to determine the SRID directly from the given schema. Typically, the SRID needs to be defined or queried from the database's spatial reference system tables or metadata, or it might default to a common SRID like 4326 (WGS 84) if not otherwise specified."
    },
    {
        "db_id":"edu",
        "id":"edu35",
        "sql":"SELECT provinces.name, COUNT(universities.name) AS private_universities_count FROM provinces LEFT JOIN universities ON provinces.name = universities.province WHERE universities.operation_type = '民办' GROUP BY provinces.name"
    },
    {
        "db_id":"edu",
        "id":"edu36",
        "sql":"SELECT COUNT(*) FROM universities WHERE province = '河北省' AND name LIKE '%职业%'"
    },
    {
        "db_id":"edu",
        "id":"edu37",
        "sql":"SELECT DISTINCT provinces.name FROM provinces JOIN universities ON provinces.name = universities.province WHERE universities.name LIKE '中国%'"
    },
    {
        "db_id":"edu",
        "id":"edu38",
        "sql":"SELECT provinces.name, universities.name FROM universities JOIN provinces ON universities.province = provinces.name WHERE universities.name LIKE '中国%'"
    },
    {
        "db_id":"edu",
        "id":"edu39",
        "sql":"SELECT name FROM cities WHERE province = '河北省' ORDER BY POP2020 DESC LIMIT 1"
    },
    {
        "db_id":"edu",
        "id":"edu40",
        "sql":"SELECT POP2020 FROM cities WHERE province = '湖北省' ORDER BY Shape_Area DESC LIMIT 1"
    },
    {
        "db_id":"edu",
        "id":"edu41",
        "sql":"SELECT -- Find the city in Hubei province with the largest area WITH LargestCity AS ( SELECT name FROM cities WHERE province = '湖北省' ORDER BY Shape_Area DESC LIMIT 1 ) -- Count the number of universities in that city SELECT c.name AS CityName, COUNT(u.name) AS UniversityCount FROM cities c JOIN universities u ON c.name = u.city WHERE c.name = (SELECT name FROM LargestCity) GROUP BY c.name"
    },
    {
        "db_id":"edu",
        "id":"edu42",
        "sql":"SELECT city, COUNT(*) AS university_count FROM universities WHERE province = '江苏省' AND (project_985 = 1 OR project_211 = 1) GROUP BY city ORDER BY university_count DESC LIMIT 1"
    },
    {
        "db_id":"edu",
        "id":"edu43",
        "sql":"SELECT (SELECT Shape_Area FROM provinces WHERE name = '内蒙古自治区') - (SELECT Shape_Area FROM provinces WHERE name = '河北省') AS area_difference"
    },
    {
        "db_id":"edu",
        "id":"edu44",
        "sql":"SELECT u.province, COUNT(*) AS num_universities FROM universities u WHERE u.affiliation = '国家民委' GROUP BY u.province"
    }
]